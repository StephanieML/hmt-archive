import org.apache.tools.ant.filters.*

/* hmtarchive project.
 *
 *  From old buildSrc tree, consider: OrderTokensTask ?
 *
 */
apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

apply from: "conf.gradle"
apply from: "versions.gradle"
apply from: "pub.gradle"


group = "org.homermultitext"

if (project.hasProperty("nightly")) {
    version = "${new Date().format('yyyy-MM-dd')}".toString()
} else {
    version = '2014.1'
}


repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public/"
    }
    // useful while waiting for new releases of HMT dependencies to 
    // percolate through to public:
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases/"
    }
}

configurations {
    hmtEditions
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyversion
    compile group: "edu.holycross.shot", name: "hocuspocus", version: hocuspocusversion
    compile group: 'edu.harvard.chs', name : 'cite' , version: citeversion
    compile group: 'edu.harvard.chs', name : 'greekutils' , version: greekutilsversion
    compile group: 'com.thaiopensource', name:'jing', version: jingversion    
    compile group: 'net.sf.saxon', name: 'saxon-dom', version: saxonversion

    testCompile group: 'junit', name: 'junit', version: junitversion
    testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion

}



/* ******************************************************************* */
/* **** Tasks for assembling editions from source material *********** */
/* ******************************************************************* */


task venAReadme (type: Copy) {
    description = "Add README file for Venetus A archive to build area."
    from ('editions/VenetusA') {
        include 'README.md'
    }
    into "${buildDir}/${archiveDir}/VenetusA"
}


// Texts other than Iliad and scholia
task venAOther (type: Copy, dependsOn: venAReadme) {
    description = "Copies into build area all texts other than Iliad and scholia"
    from ("editions/VenetusA/OtherTexts")
    into("${buildDir}/editions/archive/VenetusA")
    include("*.xml")
    doLast {
        File srcDir = new File("editions/VenetusA/OtherTexts")
        def xmlList =  srcDir.list([accept:{d, f-> f ==~ /.*xml/ }] as FilenameFilter
                    ).toList()
        File outDir = new File("${buildDir}/editions/archive/VenetusA")
        xmlList.each { fName ->
            File f = new File(outDir, fName)
            def root = new XmlParser().parse(f)
            System.err.println "${fName} validates syntactically"
        }
    }
}


// Iliad
task venAIliad(type: JavaExec, dependsOn: [venAReadme, compileGroovy]) {
    description = "Compiles single Iliad text from multiple source files."
    main = "org.homermultitext.IliadCompiler"
    args = ["editions/VenetusA/Iliad", "teiHeaders/VenetusA/VenetusA-Iliad.xml", "${buildDir}/${archiveDir}/VenetusA" ]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}


// Venetus A, main scholia
task msAHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A main scholia"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Main scholia'] )
    rename { String fileName ->
        fileName.replace('.xml','-msA.xml')
    }
}

task msAScholia(type: JavaExec, dependsOn: [msAHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A main scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msA.xml", "${buildDir}/${archiveDir}/VenetusA" , "msA"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}




// Venetus A, intermarginal scholia
task msAimHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A intermarginal scholia"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Intermarginal scholia'] )
    rename { String fileName ->
        fileName.replace('.xml','-msAim.xml')
    }

}

task msAimScholia(type: JavaExec, dependsOn: [msAimHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A main scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msAim.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAim"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}



// Venetus A, interior scholia
task msAintHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A interior scholia"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Interior scholia'] )
    rename { String fileName ->
        fileName.replace('.xml','-msAint.xml')
    }
}

task msAintScholia (type: JavaExec, dependsOn: [msAintHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A interior scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msAint.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAint"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime

}



// Venetus A, exterior scholia
task msAextHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A exterior scholia"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Exterior scholia'] )
    rename { String fileName ->
        fileName.replace('.xml','-msAext.xml')
    }
}

task msAextScholia(type: JavaExec, dependsOn: [msAextHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A exterior scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msAext.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAext"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}



// Venetus A, interlinear scholia
task msAilHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A interlinear scholia"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Interlinear scholia'] )
    rename { String fileName ->
        fileName.replace('.xml','-msAil.xml')
    }
}

task msAilScholia (type: JavaExec, dependsOn: [msAilHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A interlinear scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msAil.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAil"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}





// Venetus A, later scholia
task msALaterHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A scholia in later hand"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Scholia in later hand in main scholia block '] )
    rename { String fileName ->
        fileName.replace('.xml','-msALater.xml')
    }

}
task msALaterScholia (type: JavaExec, dependsOn: [msALaterHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A interlinear scholia"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msALater.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAlater"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}

    description = "Compiles and validates complete edition of Venetus A later scholia"


// Venetus A, later intermarginal scholia
task msAimLaterHeader(type: Copy) {
    description = "Compiles TEI header to reuse in composite edition of Ven A scholia in later hand in intermarginal position"
    from ('teiHeaders/VenetusA')
    into "${buildDir}/headers/VenetusA"
    include ('VenetusA-Scholia.xml')
    filter(ReplaceTokens, tokens : [scholiatitle : 'Scholia in later hand in intermarginal position '] )
    rename { String fileName ->
        fileName.replace('.xml','-msAimLater.xml')
    }
}

task msAimLaterScholia (type: JavaExec, dependsOn: [msAimLaterHeader, venAReadme, compileGroovy]) {
    description = "Compiles and validates complete edition of Venetus A later scholia in intermarginal position"
    main = "org.homermultitext.ScholiaCompiler"
    args = ["editions/VenetusA/Scholia","${buildDir}/headers/VenetusA/VenetusA-Scholia-msAimLater.xml", "${buildDir}/${archiveDir}/VenetusA" , "msAimlater"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}



task inv (type: Copy) {
    description = "Copies text inventory and README into build area."
    from ("inventories")
    into "${buildDir}/${archiveDir}"
    include ('onlineInventory.xml', 'README-HMT-archive.md', "*.rng")
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    rename { String fileName ->
        fileName.replace('-HMT-archive','')
    }

    rename { String fileName ->
        fileName.replace('onlineI','i')
    }

}

task translations (type: Copy) {
    description = "Copies translations of texts into build area."
    from ("editions/translations")
    into "${buildDir}/${archiveDir}/translations"
}

task furmanEditions (type: Copy) {
    description = "Copies Furman-generated  editions of texts into build area."
    from ("editions/Furman")
    into "${buildDir}/${archiveDir}/Furman"
}

task venetusA(type: Zip, dependsOn: [inv, venAIliad, venAReadme, msAScholia, msAextScholia, msAilScholia, msAimLaterScholia, msAimScholia, msAintScholia, msALaterScholia, translations, venAOther])  {
    description = "Builds zip file of all Venetus A documents."
    classifier = "venaxml"
    from(file("${buildDir}/${archiveDir}/VenetusA"))
    into('venetus-A-xml')

    include("**/*.xml", "README.md")
    doLast {
        System.err.println "All venetusA texts validate syntactically."
    }
}



// Can add dependencies on other MSS when we have tasks for them.
task editions(type: Zip, dependsOn: [venetusA, furmanEditions]) {
    description="Builds zip file of all edited manuscripts."
    classifier = 'editions'
    from(file("${buildDir}/${archiveDir}"))
     include("**/*.xml", "**/README.md")
    doLast {
        System.err.println "All Venetus A texts validate syntactically, and are compiled in zip file hmtarchive-VERSION-editions.zip."
    }
}




/* ******************************************************************* */
/* **** Tasks for secondary processing of composite editions   ******* */
/* ******************************************************************* */


task indexVenetusAScholia (type: JavaExec, dependsOn : "compileGroovy") {
    description="Generates tsv relating scholia to Iliad passage commented on."
    main = "org.homermultitext.ScholiaIndexer"

    args = ["editions/VenetusA/Scholia","cite/indices","scholiaToIliad.tsv",
        "urn:cts:greekLit:tlg0012.tlg001.msA", "hmt" ]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}


task tabFiles (type: JavaExec, dependsOn : ["compileGroovy", "editions"]) {
    description = "Uses a hocuspocus tabulator to create tabular files for all editions"
    main = "org.homermultitext.HmtTabulator"
    args = ["${buildDir}/${archiveDir}", "${buildDir}/${archiveDir}/inventory.xml",  "${buildDir}/tabulated"]	


    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}

task setupTabs (type: Copy) {
    description = "Generates README to accompany tabulated versions of HMT editions."
    from ('editions') {
        include 'README-tabulated.md'
        rename 'README-tabulated.md', '1-README.md'
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/tabulated"
}


task tabulated(type: Zip, dependsOn: [tabFiles, setupTabs]) {
    description = "Creates zip package of all HMT editions in tabular format."
    classifier = 'tabulated'
    from (file("${buildDir}/tabulated"))
    include("**/*.txt", "**/*.md")
    baseName = "hmt-editions"
    doLast {
        System.err.println "Tabulated version of all XML editions compiled in zip file hmt-editions-tabulated"
    }

}

task setUpTurtle(type: Copy) {
    description = "Generates README to accompany RDF version of HMT editions."
    from (file('editions')) {
        include 'README-rdf.md'
        rename 'README-rdf.md', 'README.md'
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/rdf"
}


task ctsttl(type: JavaExec, dependsOn: [compileGroovy, tabFiles]) {
    description = "Use hocuspocus to create a full rdf representation of the archive suitable for import into a CTS"
    main = "org.homermultitext.TextArchive"
    args = ["${buildDir}/${archiveDir}/inventory.xml", "${buildDir}/${archiveDir}", "${buildDir}/tabulated", "${buildDir}/rdf" ]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}


/* Corpus-wide tokenization */
task setupTokens (type: Copy) {
    description = "Generates README to accompany tokenization data from HMT editions."
    from ('editions') {
        include 'README-tokens.md'
        rename 'README-tokens.md', 'README.md'
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/tokens"
}

task tokenize(type: JavaExec, dependsOn: [compileGroovy, setupTokens]) {
    description = "Tokenizes tabular editions and generates RDF statements for each token"
    main = "org.homermultitext.HmtTokenizer"
    args = ["${buildDir}/${archiveDir}", "${buildDir}/${archiveDir}/inventory.xml",  "${buildDir}/tokens"]	


    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}


task tokens(type: Zip, dependsOn: tokenize) {
    description = "Packages tokenization TTL"
    classifier = 'tokens'
    from (file("${buildDir}/tokens"))
    baseName = "hmt-editions"
    doLast {
        System.err.println "Full text of all editions tokenized, described in RDF TTL, and compiled in zip file hmt-editions-tokens"
    }
}



/* Other publishable artifacts */

task setUpCollections (type: Copy) {
    description = "Prepares files for publishing collections archive."
    from ('cite/collections') {
        include ('README.md', 'hmtcollections.xml', '*.csv', '*.tsv')
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/collections"
}

task collections(type: Zip, dependsOn: [setUpCollections]) {
    description = "Creates zip package of all HMT collections archive."
    from (file("${buildDir}/collections"))
    baseName = "hmt-collections"

}


task setUpImages (type: Copy) {
    description = "Prepares files for publishing HMT Image archive."
    from ('cite/images') {
        include ('README.md', '**/*.csv', '**/*.tsv')
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/images"
}

task images(type: Zip, dependsOn: [setUpImages]) {
    description = "Creates zip package of HMT image archive."
    from (file("${buildDir}/images"))
    baseName = "hmt-images"
}

task setUpIndices (type: Copy) {
    description = "Prepares files for publishing CITE Index archive."
    from ('cite/indices') {
        include ('README.md', 'hmtindices.xml', '*.csv', '*.tsv')
    }
    filter(ReplaceTokens, tokens : [packagedate : "${new Date().format('yyyy-MM-dd')}".toString()] )
    into "${buildDir}/indices"
}

task indices(type: Zip, dependsOn: [setUpIndices]) {
    description = "Creates zip package of all HMT CITE Indices."
    from (file("${buildDir}/indices"))
    baseName = "hmt-indices"

}


task rdf(type: Zip, dependsOn: [ctsttl, setUpTurtle]) {
    description = "Creates zip package of all HMT editions in TTL format."
    classifier = 'rdf'
    from (file("${buildDir}/rdf"))
    include("**/*.ttl", "README.md")
    baseName = "hmt-editions"
    doLast {
        System.err.println "RDF (TTL) version of all XML editions compiled in zip file hmt-editions-rdf"
    }
}




task cite (dependsOn : [editions, collections, indices, images]) {
    doLast {
        println "Built zip files of all HMT CITE archives."
    }
}


artifacts {
    hmtEditions editions
    hmtEditions tabulated
    hmtEditions tokens
    hmtEditions collections
    hmtEditions indices
    hmtEditions images
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


uploadHmtEditions {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
    doLast {
        System.err.println "All HMT editions uploaded."
    }
}

//test.dependsOn editions


/* Always buildArchives from a completely clean state */
buildArchives.dependsOn clean







